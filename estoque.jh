
entity Region {
	regionName String
}

entity Country {
	countryName String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String,
    numberAddress Long,
	postalCode String,
	city String,
	stateProvince String
}
entity Companion {
	companyName String,
    cnpj String,
    
}
entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String,
	description String
}

/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	firstName String,
	lastName String,
	email String,
	phoneNumber String,
    cpf String,
    pis String,
    ctps String,
	birthDate LocalDate
}

entity Job {
	jobTitle String,
    hireDate LocalDate,
	salary Long,   
	commissionPct Long,
	minSalary Long,
	maxSalary Long
}
enum Days {
	SEGUNDA, TERCA, QUARTA,
	QUINTA, SEXTA, SABADO, DOMINGO
}
entity WorkingHours {
	entry LocalDate,
	leavingWork Time,
	extraTime Time,
	extraTime2 Time,
	entryRest Time,
	returnRest Time,
    dayWeek LocalDate
	day Days
}
entity Journey {
	journeyName String,
    tolerance Integer,
    startJourney Instant,
    endJourney Instant,
    dayOut LocalDate,
    startDate LocalDate,
    endDate LocalDate
}

entity JobHistory {
	startDate LocalDate,
	endDate LocalDate,
	language Language
}

enum Language {
    PORTUGUESE, ENGLISH, SPANISH
}

relationship OneToOne {
	Country{region} to Region
}

relationship OneToOne {
	Location{country} to Country
}
relationship OneToOne {
	Companion{location} to Location
}
relationship ManyToOne {
	Department{companion} to Companion
}

relationship OneToOne {
	Department{location} to Location
}

relationship ManyToMany {
	Job{task(title)} to Task{job}
}
relationship ManyToMany {
	Employee{journey} to Journey{employee}
}
relationship ManyToMany {
	WorkingHours{journey} to Journey{workinghours}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee to Job{employee},
	/**
	* A relationship
	*/
	Department to
	/**
	* Another side of the same relationship
	*/
	Employee{department}
}

relationship ManyToOne {
	Employee{manager} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
	JobHistory{job} to Job,
	JobHistory{department} to Department,
	JobHistory{employee} to Employee
}

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job with pagination

// Use Data Transfer Objects (DTO)
dto * with mapstruct

// Set service options to all except few
service all with serviceImpl

// Set an angular suffix
// angularSuffix * with mySuffix
